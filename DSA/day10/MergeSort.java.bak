  public class MergeSort {
    static void sort(int[] arr) {
        if (arr.length < 2) return;

        int mid = arr.length / 2;

        int[] left_half = new int[mid];
        int[] right_half = new int[arr.length - mid];

        // copying the elements of array into left_half
        for (int i = 0; i < mid; i++) {
            left_half[i] = arr[i];
        }
        
        // copying the elements of array into right_half
        for (int i = mid; i < arr.length; i++) {
            right_half[i - mid] = arr[i];
        }

        sort(left_half);
        sort(right_half);
        merge(arr, left_half, right_half);
    }
  
    static void merge(int[] arr, int[] left_half, int[] right_half) {
        int i = 0, j = 0, k = 0;

        while (i < left_half.length && j < right_half.length) {
            if (left_half[i] < right_half[j]) {
                arr[k++] = left_half[i++];
            }
            else {
                arr[k++] = right_half[j++];
            }
        }
        while (i < left_half.length) {
            arr[k++] = left_half[i++];
        }
        while (j < right_half.length) {
            arr[k++] = right_half[j++];
        }
    }
    public static void main(String[] args) {
        int[] arr = {5, 1, 7, 3, 8, 0, 1, 5, 7, 2, 8, 9, -7, 4, -9, -3, 4};
        sort(arr);
        System.out.println(Arrays.toString(arr));
    }
}











/*


  // Java program to sort Linked List using Insertion Sort

public class LinkedlistIS
{
	node head;
	node sorted;

	class node
	{
		int val;
		node next;

		public node(int val)
		{
			this.val = val;
		}
	}

	void push(int val)
	{
		// allocate node
		node newnode = new node(val);
	
		// link the old list off the new node
		newnode.next = head;
	
		// move the head to point to the new node
		head = newnode;
	}

	//void sortSongs(){}
	
	// function to sort a singly linked list using insertion sort
	void insertionSort(Node headref)
	{
		// Initialize sorted linked list
		sorted = null;
		Node current = headref;
	
		// Traverse the given linked list and insert every
		// node to sorted
		while (current != null)
		{
			// Store next for next iteration
			Node next = current.next;
		
			// insert current in sorted linked list
			sortedInsert(current);
		
			// Update current
			current = next;
		}
	
		// Update head_ref to point to sorted linked list
		head = sorted;
	}

	
	// function to insert a new_Node in a list. Note that
	// this function expects a pointer to head_ref as this
	// can modify the head of the input linked list
	// (similar to push())
	void sortedInsert(Node newNode)
	{
		// Special case for the head end
		if (sorted == null || sorted.data.charAt(0) >= newNode.data.charAt(0))
		{
			newNode.next = sorted;
			sorted = newNode;
		}
		else
		{
			Node current = sorted;
		
			// Locate the Node before the point of insertion
			while (current.next != null && current.next.data.charAt(0) < newNode.data.charAt(0))
			{
				current = current.next;
			}
		
			newNode.next = current.next;
			current.next = newNode;
		}
	}
	// Function to print linked list
	void printlist(node head)
	{
		while (head != null)
		{
			System.out.print(head.val + " ");
			head = head.next;
		}
	}
	
	// Driver program to test above functions
	public static void main(String[] args)
	{
		LinkedlistIS list = new LinkedlistIS();
	
		list.push(4);
		list.push(7);
		list.push(3);
		list.push(8);
	
		System.out.println("Linked List before Sorting..");
		list.printlist(list.head);
	
		list.insertionSort(list.head);
	
		System.out.println("\nLinkedList After sorting");
		list.printlist(list.head);
	}
}
